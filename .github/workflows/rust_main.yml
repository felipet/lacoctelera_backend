# This workflow is meant to be used only with commits to the main branch.

name: Rust CI Main Flow

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'Containerfile'
      - 'Cargo.**'
  pull_request:
    branches: [ "main", "devel" ]
    paths:
      - 'src/**'
      - 'Containerfile'
      - 'Cargo.**'

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.4
  SQLX_FEATURES: "rustls,mysql"

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Enforce formatting
        run: cargo fmt --check

  build:
    name: Check
    needs: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Build
        run: cargo check --future-incompat-report

  clippy:
    name: Clippy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Linting
        run: cargo clippy --no-deps -- -D warnings

  test:
    name: Test & Coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - uses: getong/mariadb-action@v1.11
        with:
           mysql root password: "password"
           mysql database: "test_cocktail"
           mysql user: "root"
           mysql password: "root"
      - name: Install SQLx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.bash
      - name: Check SQLx-data.json is up to date
        run: cargo sqlx prepare --workspace --check
      - name: Tests
        run: DATABASE_URL="mariadb://root:password@localhost:3306/test_cocktail"
             LACOCTELERA__EMAIL_CLIENT__SANDBOX_MODE=true
             LACOCTELERA__EMAIL_CLIENT__API_USER=${{secrets.MAILJET_API_USER}}
             LACOCTELERA__EMAIL_CLIENT__API_KEY=${{secrets.MAILJET_API_KEY}}
             LACOCTELERA__EMAIL_CLIENT__ADMIN_ADDRESS=${{secrets.MAILJET_FROM_EMAIL}}
             cargo test
      - name: Generate code coverage
        run: DATABASE_URL="mariadb://root:password@localhost:3306/test_cocktail"
             LACOCTELERA__EMAIL_CLIENT__SANDBOX_MODE=true
             LACOCTELERA__EMAIL_CLIENT__API_USER=${{secrets.MAILJET_API_USER}}
             LACOCTELERA__EMAIL_CLIENT__API_KEY=${{secrets.MAILJET_API_KEY}}
             LACOCTELERA__EMAIL_CLIENT__ADMIN_ADDRESS=${{secrets.MAILJET_FROM_EMAIL}}
             cargo tarpaulin --verbose --all-features --timeout 120 --out xml
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
